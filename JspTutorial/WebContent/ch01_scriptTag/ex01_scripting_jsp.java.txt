/* JSP 생명 주기
	1. 번역(translation) 단계
		- JSP 컨테이너가 JSP 소스파일을 자바 코드(서블릿)으로 변환하는 단계(Hello.jsp -> Hello_jsp.java)
		- JSP 컨테이너가 JSP 페이지 내 태그 라이브러리를 참조하는 사용자 정의 태그, 표준 디렉티브, 액션 태그의 구문 정확성을 검증함
	2. 컴파일(compilation) 단계
		- 자바 코드(서블릿)을 컴파일하여 클래스 파일 생성하는 단계(Hello_jsp.java -> Hello_jsp.class)
		- JSP 컨테이너가 JSP 페이지 내의 선언문, 처리문, 표현문 등의 스크립트 태그를 사용하여 삽입된 자바 코드의 구문 오류를 검사함
	3. 로딩(loading) 및 초기화(initialization) 단계
		- JSP가 *.class를 로딩하고 클래스의 인스턴스를 작성하는 단계
		- JSP 컨테이너는 서블릿의 init()메서드인 jspInit()을 호출하여 인스턴스가 된 객체를 초기화함
		  일반적으로 초기화는 한 번만 수행되며 데이터베이스 연결, 파일 열기, 룩업 테이블 생성 등을 초기화함
	4. 실행(execution) 단계
		- 각 클라이언트 요청에 대해 JSP 컨테이너가 요청 및 응답 객체를 전달하는 _jspService() 메서드를 실행하는 단계
		- 웹 브라우저가 JSP 페이지를 요청하여 페이지가 로딩 및 초기화될 때마다 JSP 컨테이너는 JSP에서 _jspService()를 호출하여 응답 객체를 전달함
		  이 단계는  JSP 생명 주기가 끝날 때까지 모든 클라이언트의 요청에 대해 상호 작용함
	5. 소멸(destruction) 단계
		- JSP 생명주기를 완료하는 단계
		- JSP 컨테이너는 실행되고 있는 JSP를 서블릿의 destroy() 메서드인 jspDestroy()를 사용하여 제거함
*/

/***** 파일경로: jsp_study\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\JspTutorial\org\apache\jsp\ch01_005fscriptTag\ex01_005fscripting_jsp.java *****/
/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2024-01-28 08:35:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch01_005fscriptTag;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex01_005fscripting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


		int count = 3;
	
		String makeItLower(String data) {
			return data.toLowerCase();
		}
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Scripting Tag</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>Scripting Tag</h2>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

		for (int i = 1; i <= count; i++) {
			out.println("Java Server Pages " + i + ".<br>");
		}
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print(makeItLower("Hello World"));
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
